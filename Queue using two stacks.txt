 Queue using two stacks:

#include <stdio.h>
#include <stdlib.h>
#define MAX_SIZE 20
int stack1[MAX_SIZE], stack2[MAX_SIZE];
int top1 = -1, top2 = -1;
void push(int stack[], int value, int *top) {
 if (*top == MAX_SIZE - 1) {
 printf("Overflow\n");
 return;
 }
 (*top)++;
 stack[*top] = value;
}
int pop(int stack[], int *top) {
 if (*top == -1) {
 printf("Underflow\n");
 return -1;
 }
 int value = stack[*top];
 (*top)--;
 return value;
}
void enqueue(int value) {
 push(stack1, value, &top1);
}
int dequeue() {
 if (top1 == -1 && top2 == -1) {
 printf("Queue is empty\n");
 return -1;
 }
 if (top2 == -1) {
 while (top1 != -1) {
 int value = pop(stack1, &top1);
 push(stack2, value, &top2);
 }
 }
 int dequeuedValue = pop(stack2, &top2);
 return dequeuedValue;
}
void displayQueue() {
 if (top1 == -1 && top2 == -1) {
 printf("Queue is empty\n");
 return;
 }
 printf("Queue elements: ");
 for (int i = top2; i >= 0; i--) {
 printf("%d ", stack2[i]);
 }
 for (int i = 0; i <= top1; i++) {
 printf("%d ", stack1[i]);
 }
 printf("\n");
}
int main() {
 int choice, num;
 
 while (1) {
 printf("\n1. Enqueue\n2. Dequeue\n3. Display Queue\n4. Exit\n");
 printf("Enter your choice: ");
 scanf("%d", &choice);
 
 switch (choice) {
 case 1:
 printf("Enter item to be inserted: ");
 scanf("%d", &num);
 enqueue(num);
 break;
 case 2:
 printf("Item deleted: %d\n", dequeue());
 break;
 case 3:
 displayQueue();
 break;
 case 4:
 exit(0);
 default:
 printf("\nInvalid Choice!\n");
 }
 }
 return 0;
}
