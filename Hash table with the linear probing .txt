Hash table with the linear probing method:
#include<stdio.h>
#include<stdlib.h>
#define size 10
int arr[size];
void init();
void insert(int value);
void del(int value);
void printTable();
int main() {
 int ch = 0, temp;
 init();
 while (ch != 4) {
 printf("\n1. Insert\n2. Delete\n3. Print hash table\n4. Exit\nEnter your choice: ");
 scanf("%d", &ch);
 switch (ch) {
 case 1: 
 printf("Enter element to be inserted: ");
 scanf("%d", &temp);
 insert(temp);
 break;
 case 2: 
 printf("Enter element to be deleted: ");
 scanf("%d", &temp);
 del(temp);
 break;
 case 3: 
 printTable();
 break;
 case 4: 
 exit(0);
 break;
 default: 
 printf("Wrong input!\n");
 break;
 }
 }
 return 0;
}
void init() {
 for (int i = 0; i < size; i++)
 arr[i] = -1;
}
void insert(int value) {
 int key = value % size;
 if (arr[key] == -1) {
 arr[key] = value;
 printf("%d inserted with key %d!\n", value, key);
 } else {
 printf("Collision: key %d has element %d already!\n", key, arr[key]);
 while (arr[key] != -1) {
 key++;
 if (key == size) {
 printf("Unable to insert %d\n", value);
 return;
 }
 }
 arr[key] = value;
 printf("%d inserted with key %d!\n", value, key);
 }
}
void del(int value) {
 for (int i = 0; i < size; i++) {
 if (arr[i] == value) {
 arr[i] = -1;
 printf("%d is deleted\n", value);
 return;
 }
 }
 printf("%d not found in the hash table\n", value);
}
void printTable() {
 printf("\nVALUE\t---\tKEY\n===================\n");
 for (int i = 0; i < size; i++) {
 if (arr[i] != -1) {
 printf("%d\t---\t%d\n", arr[i], i);
 }
 }
}

